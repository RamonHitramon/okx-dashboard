const https = require('https');

class OKXAPITester {
    constructor() {
        this.baseUrl = 'https://www.okx.com/api/v5';
    }

    async makeRequest(endpoint) {
        return new Promise((resolve, reject) => {
            const url = `${this.baseUrl}${endpoint}`;
            
            https.get(url, (res) => {
                let data = '';
                
                res.on('data', (chunk) => {
                    data += chunk;
                });
                
                res.on('end', () => {
                    try {
                        const jsonData = JSON.parse(data);
                        resolve(jsonData);
                    } catch (error) {
                        reject(new Error(`Failed to parse JSON: ${error.message}`));
                    }
                });
            }).on('error', (error) => {
                reject(new Error(`Request failed: ${error.message}`));
            });
        });
    }

    async testFundingRates() {
        console.log('üîç –¢–µ—Å—Ç–∏—Ä—É—é API —Ñ–∞–Ω–¥–∏–Ω–≥–∞...');
        
        try {
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∞–Ω–¥–∏–Ω–≥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            const response = await this.makeRequest('/public/funding-rate?instId=BTC-USDT-SWAP');
            
            if (response.code === '0' && response.data) {
                console.log(`‚úÖ –§–∞–Ω–¥–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–µ–Ω! –ù–∞–π–¥–µ–Ω–æ ${response.data.length} –∑–∞–ø–∏—Å–µ–π`);
                console.log('üìä –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Ñ–∞–Ω–¥–∏–Ω–≥–∞:');
                console.log(JSON.stringify(response.data.slice(0, 3), null, 2));
                return true;
            } else {
                console.log('‚ùå –§–∞–Ω–¥–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', response.msg);
                return false;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–Ω–¥–∏–Ω–≥–∞:', error.message);
            return false;
        }
    }

    async testOpenInterest() {
        console.log('\nüîç –¢–µ—Å—Ç–∏—Ä—É—é API Open Interest...');
        
        try {
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º Open Interest –¥–ª—è SWAP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            const response = await this.makeRequest('/public/open-interest?instType=SWAP');
            
            if (response.code === '0' && response.data) {
                console.log(`‚úÖ Open Interest –¥–æ—Å—Ç—É–ø–µ–Ω! –ù–∞–π–¥–µ–Ω–æ ${response.data.length} –∑–∞–ø–∏—Å–µ–π`);
                console.log('üìä –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö Open Interest:');
                console.log(JSON.stringify(response.data.slice(0, 3), null, 2));
                return true;
            } else {
                console.log('‚ùå Open Interest –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', response.msg);
                return false;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Open Interest:', error.message);
            return false;
        }
    }

    async testFundingRateHistory() {
        console.log('\nüîç –¢–µ—Å—Ç–∏—Ä—É—é –∏—Å—Ç–æ—Ä–∏—é —Ñ–∞–Ω–¥–∏–Ω–≥–∞...');
        
        try {
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ñ–∞–Ω–¥–∏–Ω–≥–∞ –¥–ª—è BTC-USDT-SWAP
            const response = await this.makeRequest('/public/funding-rate-history?instId=BTC-USDT-SWAP');
            
            if (response.code === '0' && response.data) {
                console.log(`‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ñ–∞–Ω–¥–∏–Ω–≥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞! –ù–∞–π–¥–µ–Ω–æ ${response.data.length} –∑–∞–ø–∏—Å–µ–π`);
                console.log('üìä –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–∏ —Ñ–∞–Ω–¥–∏–Ω–≥–∞:');
                console.log(JSON.stringify(response.data.slice(0, 3), null, 2));
                return true;
            } else {
                console.log('‚ùå –ò—Å—Ç–æ—Ä–∏—è —Ñ–∞–Ω–¥–∏–Ω–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', response.msg);
                return false;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ñ–∞–Ω–¥–∏–Ω–≥–∞:', error.message);
            return false;
        }
    }

    async run() {
        console.log('üöÄ –¢–µ—Å—Ç–∏—Ä—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ñ–∞–Ω–¥–∏–Ω–≥—É –∏ Open Interest –≤ OKX API...\n');
        
        const fundingAvailable = await this.testFundingRates();
        const oiAvailable = await this.testOpenInterest();
        const fundingHistoryAvailable = await this.testFundingRateHistory();
        
        console.log('\nüìã –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç:');
        console.log(`- –§–∞–Ω–¥–∏–Ω–≥: ${fundingAvailable ? '‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`);
        console.log(`- Open Interest: ${oiAvailable ? '‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`);
        console.log(`- –ò—Å—Ç–æ—Ä–∏—è —Ñ–∞–Ω–¥–∏–Ω–≥–∞: ${fundingHistoryAvailable ? '‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}`);
        
        if (fundingAvailable && oiAvailable) {
            console.log('\nüéâ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã! –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –¥–∞—à–±–æ—Ä–¥.');
        } else {
            console.log('\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é.');
        }
    }
}

const tester = new OKXAPITester();
tester.run();
